{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fswiss\fcharset0 Helvetica-LightOblique;
\f3\froman\fcharset0 Times-Roman;\f4\fnil\fcharset0 Verdana-Bold;\f5\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue233;
\red64\green64\blue64;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c93333;
\cssrgb\c31765\c31765\c31765;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid102\'00;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww24840\viewh14460\viewkind0
\deftab720
\pard\pardeftab720\sl640\sa600\partightenfactor0

\f0\fs56 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Operators in Kubernetes\
\pard\pardeftab720\sl560\partightenfactor0

\f1\fs32 \cf2 Kubernetes is designed for automation. Out of the box, you get lots of built-in automation from the core of Kubernetes. You can use Kubernetes to automate deploying and running workloads,\'a0
\f2\i and
\f1\i0 \'a0you can automate how Kubernetes does that.\
Kubernetes\'92\'a0{\field{\*\fldinst{HYPERLINK "https://kubernetes.io/docs/concepts/architecture/controller/"}}{\fldrslt controllers}}\'a0concept lets you extend the cluster\'92s behaviour without modifying the code of Kubernetes itself. Operators are clients of the Kubernetes API that act as controllers for a\'a0{\field{\*\fldinst{HYPERLINK "https://kubernetes.io/docs/concepts/api-extension/custom-resources/"}}{\fldrslt \cf4 \strokec4 Custom Resource}}.\
\pard\pardeftab720\sl640\sa600\partightenfactor0

\f0\fs56 \cf2 An example Operator\
\pard\pardeftab720\sl560\partightenfactor0

\f1\fs32 \cf2 Some of the things that you can use an operator to automate include:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl560\sa240\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 deploying an application on demand\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 taking and restoring backups of that application\'92s state\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 handling upgrades of the application code alongside related changes such as database schemas or extra configuration settings\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 publishing a Service to applications that don\'92t support Kubernetes APIs to discover them\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 simulating failure in all or part of your cluster to test its resilience\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 choosing a leader for a distributed application without an internal member election process\cb1 \
\pard\pardeftab720\sl560\partightenfactor0
\cf2 \cb3 What might an Operator look like in more detail? Here\'92s an example in more detail:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl560\sa240\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A custom resource named SampleDB, that you can configure into the cluster.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A Deployment that makes sure a Pod is running that contains the controller part of the operator.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A container image of the operator code.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Controller code that queries the control plane to find out what SampleDB resources are configured.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The core of the Operator is code to tell the API server how to make reality match the configured resources.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl560\sa240\partightenfactor0
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If you add a new SampleDB, the operator sets up PersistentVolumeClaims to provide durable database storage, a StatefulSet to run SampleDB and a Job to handle initial configuration.\cb1 \
\ls2\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If you delete it, the Operator takes a snapshot, then makes sure that the StatefulSet and Volumes are also removed.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl560\sa240\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The operator also manages regular database backups. For each SampleDB resource, the operator determines when to create a Pod that can connect to the database and take backups. These Pods would rely on a ConfigMap and / or a Secret that has database connection details and credentials.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Because the Operator aims to provide robust automation for the resource it manages, there would be additional supporting code. For this example, code checks to see if the database is running an old version and, if so, creates Job objects that upgrade it for you.\cb1 \
\pard\pardeftab720\sl640\sa600\partightenfactor0

\f0\fs56 \cf2 \cb3 Deploying Operators\
\pard\pardeftab720\sl560\partightenfactor0

\f1\fs32 \cf2 The most common way to deploy an Operator is to add the Custom Resource Definition and its associated Controller to your cluster. The Controller will normally run outside of the\'a0{\field{\*\fldinst{HYPERLINK "https://kubernetes.io/docs/reference/glossary/?all=true#term-control-plane"}}{\fldrslt control plane}}, much as you would run any containerized application. For example, you can run the controller in your cluster as a Deployment.\
\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://operatorhub.io/getting-started"}}{\fldrslt 
\f3\fs24 \cf4 \cb1 \ul \ulc4 \strokec4 https://operatorhub.io/getting-started}}
\f3\fs24 \cf4 \cb1 \ul \ulc4 \strokec4 \
\

\f4\b\fs46 ETCD:
\f3\b0\fs24 \

\f1\fs32 \cf2 \cb3 \ulnone \strokec2 \
\pard\pardeftab720\sl560\partightenfactor0
\cf2 \
\pard\pardeftab720\sl340\partightenfactor0

\f5\fs28 \cf5 \strokec5 The etcd Operater creates and maintains highly-available etcd clusters on Kubernetes, allowing engineers to easily deploy and manage etcd clusters for their applications.
\f1\fs32 \cf2 \strokec2 \
\pard\pardeftab720\sl560\partightenfactor0
\cf2 \
Installation:\
=======\
\
 curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/0.14.1/install.sh | bash -s 0.14.1\
 kubectl create -f https://operatorhub.io/install/etcd.yaml\
 kubectl get csv -n my-etcd\
\
Usage:\
=====\
\
\
\
}